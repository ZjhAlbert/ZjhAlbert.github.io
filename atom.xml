<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VenusJ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-12-26T14:55:30.376Z</updated>
  <id>/</id>
  
  <author>
    <name>VenusJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>简单工厂、工厂方法和抽象工厂</title>
    <link href="/2019/12/26/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82/"/>
    <id>/2019/12/26/设计模式/创建型模式/简单工厂/</id>
    <published>2019-12-25T16:00:00.000Z</published>
    <updated>2019-12-26T14:55:30.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简单工厂、工厂方法和抽象工厂"><a href="#简单工厂、工厂方法和抽象工厂" class="headerlink" title="简单工厂、工厂方法和抽象工厂"></a>简单工厂、工厂方法和抽象工厂</h1><h2 id="1-简单工厂"><a href="#1-简单工厂" class="headerlink" title="1.简单工厂"></a>1.简单工厂</h2><h3 id="定义："><a href="#定义：" class="headerlink" title="定义："></a>定义：</h3><p>由一个工厂对象决定创建出哪一种产品类的实例。定义一个创建对象的接口，让子类决定其实例化哪一个类。再使用工厂方法延迟实例化其子类。</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p>创建型，但不属于GOF23中设计模式。</p><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>工厂类负责创建的对象比较少。客户端(应用层)只知道闯入工厂类的参数，对于如何创建对象(逻辑)不关心。</p><a id="more"></a><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>只需要传入一个正确的参数，就可以获取你所需要的对象而无须知道其创建细节。</p><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><p>工厂类的职责相对过重，增加新的产品需要修改工厂的判断逻辑，违背开闭原则。</p><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h3><p>先定义一个接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created By Administrator</span></span><br><span class="line"><span class="comment"> * User: VenusZ</span></span><br><span class="line"><span class="comment"> * Date: on 2019/12/25 23:15</span></span><br><span class="line"><span class="comment"> * Desc: 可以是抽象类或者接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类一:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignAction</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我正在唱歌"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>子类二:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanceAction</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我正在跳舞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>工厂类:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 简单工厂实现方式</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type  动作类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">getAction</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">"sign"</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> SignAction();</span><br><span class="line">        &#125;  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"dance"</span>.equals(type)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> DanceAction();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反射模式下的简单工厂实现</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">getReflectAction</span><span class="params">(Class clazz)</span> </span>&#123;</span><br><span class="line">        Action action = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            action = (Action) Class.forName(clazz.getName()).newInstance();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> action;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 简单工厂例子</span></span><br><span class="line">        ActionFactory factory = <span class="keyword">new</span> ActionFactory();</span><br><span class="line">        Action sign = factory.getAction(<span class="string">"sign"</span>);</span><br><span class="line">        sign.process();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 反射简单工厂例子</span></span><br><span class="line">        Action action = factory.getReflectAction(DanceAction.class);</span><br><span class="line">        action.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果:</p><p>我正在唱歌<br>我正在跳舞</p><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3><p>暂无</p><h2 id="2-工厂方法"><a href="#2-工厂方法" class="headerlink" title="2.工厂方法"></a>2.工厂方法</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><ul><li>定义一个创建对象的接口但让实现这个接口的类来决定实例化哪个类，工厂方法让类的实例化推迟到子类中进行。</li><li>类型：创建型</li></ul><h3 id="适用场景-1"><a href="#适用场景-1" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>创建对象需要大量重复代码；</li><li>客户端（应用层）不依赖产品类实例如何被创建、实现等细节；</li><li>一个类通过其子类来指定创建哪个对象；</li></ul><h3 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h3><ol><li>用户只需要关系所需产品对应的工厂，无须关心创建细节。</li><li>加入新产品符合开闭原则，提高可扩展性。</li></ol><h3 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h3><ol><li>类的个数容易过多，增加复杂度</li><li>增加了系统的抽象性和理解难度。</li></ol><h3 id="Coding-1"><a href="#Coding-1" class="headerlink" title="Coding"></a>Coding</h3><p>抽象动作接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象动作工厂接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActionFacctory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Action <span class="title">getAction</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体动作实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanceAction</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我正在跳舞"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignAction</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我正在唱歌"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体动作工厂实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanceActionFactory</span> <span class="keyword">extends</span> <span class="title">ActionFacctory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">getAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DanceAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignActionFactory</span> <span class="keyword">extends</span> <span class="title">ActionFacctory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">getAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SignAction();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 分别通过不同的工厂类去获取实例对象</span></span><br><span class="line">        SignActionFactory signActionFactory = <span class="keyword">new</span> SignActionFactory();</span><br><span class="line">        signActionFactory.getAction().process();</span><br><span class="line"></span><br><span class="line">        DanceActionFactory danceActionFactory = <span class="keyword">new</span> DanceActionFactory();</span><br><span class="line">        danceActionFactory.getAction().process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p>我正在唱歌<br>我正在跳舞</p><h3 id="源码解析-1"><a href="#源码解析-1" class="headerlink" title="源码解析"></a>源码解析</h3><p>暂无</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>​        与简单工厂比较，工厂方法符合开闭原则、单一职责，但如果需要在增加一个具体动作，需要创建对应具体动作实现类和具体动作工厂实现类，这样会成类太多。如果要修成抽象动作，修改的具体动作也比较多。</p><h2 id="3-抽象工厂"><a href="#3-抽象工厂" class="headerlink" title="3.抽象工厂"></a>3.抽象工厂</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><ul><li>抽象工厂模式提供一个创建一系列相关或相互依赖对象的接口。无须指定它们具体的类</li><li>类型：创建型</li></ul><h3 id="适用场景-2"><a href="#适用场景-2" class="headerlink" title="适用场景"></a>适用场景</h3><ul><li>客户端不依赖于产品类实例如何被创建、实现等细节。</li><li>强调一系列相关的产品对象一起使用创建对象需要大量重复的代码。</li><li>提供一个产品类的库，所有的产品以同样的接口出现，从而使客户端不依赖于具体实现。</li></ul><h3 id="优点-2"><a href="#优点-2" class="headerlink" title="优点"></a>优点</h3><ol><li>具体产品在应用层代码隔离，无须关系创建细节。</li><li>将一个系列的产品族统一到一起创建。</li></ol><h3 id="缺点-2"><a href="#缺点-2" class="headerlink" title="缺点"></a>缺点</h3><ol><li>规定了所有可能被创建的产品集合，产品族中扩展新的产品困难，需要修改抽象工厂的接口。</li><li>增加了系统的抽象性和理解难度。</li></ol><h3 id="Coding-2"><a href="#Coding-2" class="headerlink" title="Coding"></a>Coding</h3><p>抽象动作接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象动作笔记接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Note</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>抽象动作和笔记工厂接口类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">HobbyFactory</span> </span>&#123;</span><br><span class="line">    <span class="function">Action <span class="title">getAction</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">Note <span class="title">getNote</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>唱歌动作实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignAction</span> <span class="title">entends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"培养唱歌爱好"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignAction</span> <span class="title">entends</span> <span class="title">Note</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       System.out.println(<span class="string">"记录唱歌笔记"</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳舞动作实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanceAction</span> <span class="title">entends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"培养跳舞爱好"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanceAction</span> <span class="title">entends</span> <span class="title">Note</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">process</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"记录跳舞笔记"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>唱歌工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SignHobbyFactory</span> <span class="keyword">implements</span> <span class="title">HobbyFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">getAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> SignAction();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Note <span class="title">getNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> SignNote();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>跳舞工厂类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DanceHobbyFactory</span> <span class="keyword">implements</span> <span class="title">HobbyFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Action <span class="title">getAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> DanceAction();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Note <span class="title">getNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="keyword">new</span> DanceNote();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HobbyFactory hobbyFactory = <span class="keyword">new</span> DanceHobbyFactory();</span><br><span class="line">        Action action = hobbyFactory.getAction();</span><br><span class="line">        Dance dance = hobbyFactory.getNote();</span><br><span class="line">        action.process();</span><br><span class="line">        dance.process();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果：</p><p>培养跳舞爱好</p><p>记录跳舞笔记</p><h3 id="源码解析-2"><a href="#源码解析-2" class="headerlink" title="源码解析"></a>源码解析</h3><p>暂无</p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><p>简单工厂违反了最基本的原则；</p><p>工厂方法的工厂个数过多，导致系统庞大；</p><p>抽象工厂增加新的产品族很方便；</p><p><strong>自言自语：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2019</span><span class="number">-12</span><span class="number">-26</span> 平凡的一天，记录下学习工厂方法和抽象工厂的博客，加油，送给未来的自己~</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;简单工厂、工厂方法和抽象工厂&quot;&gt;&lt;a href=&quot;#简单工厂、工厂方法和抽象工厂&quot; class=&quot;headerlink&quot; title=&quot;简单工厂、工厂方法和抽象工厂&quot;&gt;&lt;/a&gt;简单工厂、工厂方法和抽象工厂&lt;/h1&gt;&lt;h2 id=&quot;1-简单工厂&quot;&gt;&lt;a href=&quot;#1-简单工厂&quot; class=&quot;headerlink&quot; title=&quot;1.简单工厂&quot;&gt;&lt;/a&gt;1.简单工厂&lt;/h2&gt;&lt;h3 id=&quot;定义：&quot;&gt;&lt;a href=&quot;#定义：&quot; class=&quot;headerlink&quot; title=&quot;定义：&quot;&gt;&lt;/a&gt;定义：&lt;/h3&gt;&lt;p&gt;由一个工厂对象决定创建出哪一种产品类的实例。定义一个创建对象的接口，让子类决定其实例化哪一个类。再使用工厂方法延迟实例化其子类。&lt;/p&gt;
&lt;h3 id=&quot;类型&quot;&gt;&lt;a href=&quot;#类型&quot; class=&quot;headerlink&quot; title=&quot;类型&quot;&gt;&lt;/a&gt;类型&lt;/h3&gt;&lt;p&gt;创建型，但不属于GOF23中设计模式。&lt;/p&gt;
&lt;h3 id=&quot;适用场景&quot;&gt;&lt;a href=&quot;#适用场景&quot; class=&quot;headerlink&quot; title=&quot;适用场景&quot;&gt;&lt;/a&gt;适用场景&lt;/h3&gt;&lt;p&gt;工厂类负责创建的对象比较少。客户端(应用层)只知道闯入工厂类的参数，对于如何创建对象(逻辑)不关心。&lt;/p&gt;
    
    </summary>
    
      <category term="创建型模式" scheme="/categories/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="/2019/12/25/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>/2019/12/25/设计模式/创建型模式/单例模式/</id>
    <published>2019-12-24T16:00:00.000Z</published>
    <updated>2019-12-25T15:50:39.928Z</updated>
    
    <content type="html"><![CDATA[<h3 id="单例模式介绍"><a href="#单例模式介绍" class="headerlink" title="单例模式介绍"></a>单例模式介绍</h3><p><strong>定义</strong>：保证一个类仅有一个实例，并提供一个全局访问点。</p><p><strong>类型</strong>：创建型</p><p><strong>适用场景</strong>：想确保任何情况下都绝对只有一个实例。</p><p><strong>优点</strong>：</p><ul><li>在内存里只有一个实例，减少内存开销；</li></ul><ul><li>可以避免对资源的多重占用；</li></ul><ul><li>设置全局访问点，严格控制访问；</li></ul><p><strong>缺点</strong>：没有借口，不方便扩展</p><p><strong>重点</strong>：</p><ul><li>私有构造器；</li></ul><ul><li>线程安全；</li></ul><ul><li>延迟加载；</li></ul><ul><li>序列化和反序列化安全；</li></ul><ul><li>反射；</li></ul><p><strong>相关设计模式</strong>：</p><ul><li>单例模式和工厂模式；</li></ul><ul><li>单例模式和享元模式；</li></ul><a id="more"></a><h3 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h3><h4 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a><strong>源码解析</strong></h4><p>AbstractBeanFactory类中的getBean()方法里面的doGetBean方法里面的this.getSingleton(beanName);</p><p>如下图所示</p><p><img src="/2019/12/25/设计模式/创建型模式/单例模式/doGetBean图片.png" alt=""></p><p><img src="/2019/12/25/设计模式/创建型模式/单例模式/getSingleton图片.png" alt=""></p><p><img src="/2019/12/25/设计模式/创建型模式/单例模式/getSingleton最终图片.png" alt=""></p><h4 id="懒汉式单例模式"><a href="#懒汉式单例模式" class="headerlink" title="懒汉式单例模式"></a>懒汉式单例模式</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created By VenusJ on 2019/12/25 22:06</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Desc: 懒汉式单例模式  线程不安全  可以在静态方法增加synchronized 关键字来保证线程安全</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LazySingleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> LazySingleton singleton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">LazySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> LazySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">            singleton = <span class="keyword">new</span> LazySingleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="饿汉式单例模式"><a href="#饿汉式单例模式" class="headerlink" title="饿汉式单例模式"></a><strong>饿汉式单例模式</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created By Administrator</span></span><br><span class="line"><span class="comment"> * User: VenusZ</span></span><br><span class="line"><span class="comment"> * Date: on 2019/12/25 22:16</span></span><br><span class="line"><span class="comment"> * Desc: 单例模式 饿汉模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungarySingleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span>, <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span>  <span class="keyword">final</span> HungarySingleton hungarySingleton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加载类时生成唯一一个实例</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        hungarySingleton = <span class="keyword">new</span> HungarySingleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungarySingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 防止序列化时  破坏单例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hungarySingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungarySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hungarySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双重检查单例模式"><a href="#双重检查单例模式" class="headerlink" title="双重检查单例模式"></a><strong>双重检查单例模式</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created By Administrator</span></span><br><span class="line"><span class="comment"> * User: VenusZ</span></span><br><span class="line"><span class="comment"> * Date: on 2019/12/25 22:27</span></span><br><span class="line"><span class="comment"> * Desc: 双重检查单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DoubleCheckSingleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">DoubleCheckSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这里增加volatile关键字，是为了保持内存可见性和防止指令重排序。保证该变量在线程之间可见，下述步骤2和3可能在多线线程时发生调换</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> DoubleCheckSingleton singleton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DoubleCheckSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleton==<span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (DoubleCheckSingleton.class) &#123;</span><br><span class="line">                <span class="keyword">if</span>(singleton == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="comment">// 1 给singleton分配内存</span></span><br><span class="line">                    <span class="comment">// 2 利用构造函数初始成员变量</span></span><br><span class="line">                    <span class="comment">// 3 给singleton对象指向分配的内存空间      这个涉及指令重排和内存屏障知识，这里就不作详细介绍了</span></span><br><span class="line">                    singleton = <span class="keyword">new</span> DoubleCheckSingleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="静态内部类方式"><a href="#静态内部类方式" class="headerlink" title="静态内部类方式"></a><strong>静态内部类方式</strong></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created By Administrator</span></span><br><span class="line"><span class="comment"> * User: VenusZ</span></span><br><span class="line"><span class="comment"> * Date: on 2019/12/25 22:37</span></span><br><span class="line"><span class="comment"> * Desc: 静态内部类单例模式   延迟初始化，来减少创建单利实例的开销</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticInnerClassSingleton</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">StaticInnerClassSingleton</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> StaticInnerClassSingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> InnerClass.singleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 在内部类中实例化对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">InnerClass</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> StaticInnerClassSingleton singleton = <span class="keyword">new</span> StaticInnerClassSingleton();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="序列化破坏单例模式"><a href="#序列化破坏单例模式" class="headerlink" title="序列化破坏单例模式"></a>序列化破坏单例模式</h4><p>对应类需要实现Serializable接口，才能进行序列化和反序列化。</p><p>如需解决序列化和反序列化破话单例模式的话，方案可以在对应类中增加对应方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * \* Created with IntelliJ IDEA.</span></span><br><span class="line"><span class="comment"> * \* User: VenusZ</span></span><br><span class="line"><span class="comment"> * \* Date: 2019/12/25</span></span><br><span class="line"><span class="comment"> * \* Time: 22:46</span></span><br><span class="line"><span class="comment"> * \* Description:还是单例模式，在类加载时就已经初始化好对应的实例</span></span><br><span class="line"><span class="comment"> * \</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HungarySingleton</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> HungarySingleton hungarySingleton;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        hungarySingleton = <span class="keyword">new</span> HungarySingleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HungarySingleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hungarySingleton;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">HungarySingleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 防止序列化时  破坏单例对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">readResolve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> hungarySingleton;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>反射攻击破坏单例模式</p><h4 id="容器单例"><a href="#容器单例" class="headerlink" title="容器单例"></a>容器单例</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created By Administrator</span></span><br><span class="line"><span class="comment"> * User: VenusZ</span></span><br><span class="line"><span class="comment"> * Date: on 2019/12/25 22:44</span></span><br><span class="line"><span class="comment"> * Desc: 容器单例模式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContainerSingleton</span> </span>&#123;</span><br><span class="line"><span class="comment">// 使用map容器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Object&gt; singletonMap = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">putInstance</span><span class="params">(String key,Object instance )</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(StringUtils.isNotBlank(key) &amp;&amp; instance != <span class="keyword">null</span>) <span class="keyword">if</span> (singletonMap.containsKey(key)) &#123;</span><br><span class="line">            singletonMap.put(key, instance);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">getInstance</span><span class="params">(String key)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singletonMap.get(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Enum枚举单例"><a href="#Enum枚举单例" class="headerlink" title="Enum枚举单例"></a>Enum枚举单例</h4><p>解决序列化和反序列化，以及反射工具破坏单例模式的隐患。<strong><u>推荐使用枚举单例</u></strong>。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用反编译jad工具查看对应反编译代码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> EnumInstance &#123;</span><br><span class="line">    INSTANCE&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">      <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">printLine</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          System.out.println(<span class="string">"print Line"</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printLine</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(Object data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>注意使用时，是否需要线程安全</li><li>注意使用时，是否序列化，会破坏单例模式</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;单例模式介绍&quot;&gt;&lt;a href=&quot;#单例模式介绍&quot; class=&quot;headerlink&quot; title=&quot;单例模式介绍&quot;&gt;&lt;/a&gt;单例模式介绍&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;定义&lt;/strong&gt;：保证一个类仅有一个实例，并提供一个全局访问点。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;类型&lt;/strong&gt;：创建型&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;适用场景&lt;/strong&gt;：想确保任何情况下都绝对只有一个实例。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在内存里只有一个实例，减少内存开销；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;可以避免对资源的多重占用；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;设置全局访问点，严格控制访问；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;缺点&lt;/strong&gt;：没有借口，不方便扩展&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;私有构造器；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;线程安全；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;延迟加载；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;序列化和反序列化安全；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;反射；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;相关设计模式&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单例模式和工厂模式；&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;单例模式和享元模式；&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="创建型模式" scheme="/categories/%E5%88%9B%E5%BB%BA%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>markdown 入门语法笔记</title>
    <link href="/2019/12/24/markdown%20%E8%AF%AD%E6%B3%95%E7%AC%94%E8%AE%B0/"/>
    <id>/2019/12/24/markdown 语法笔记/</id>
    <published>2019-12-23T16:00:00.000Z</published>
    <updated>2019-12-24T14:42:02.517Z</updated>
    
    <content type="html"><![CDATA[<h1 id="markdown-入门语法笔记"><a href="#markdown-入门语法笔记" class="headerlink" title="markdown 入门语法笔记"></a>markdown 入门语法笔记</h1><h2 id="1、标题"><a href="#1、标题" class="headerlink" title="## 1、标题"></a>## 1、标题</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">标题 </span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br></pre></td></tr></table></figure><p>效果</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><a id="more"></a><h2 id="2、区块引用"><a href="#2、区块引用" class="headerlink" title="2、区块引用"></a>2、区块引用</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">区块引用  </span><br><span class="line">    这个单个使用</span><br><span class="line">    &gt; 这是段引用例子    </span><br><span class="line">    </span><br><span class="line">    多个使用</span><br><span class="line">    &gt; 测试加冒号的区块引用 </span><br><span class="line">    &gt;&gt; 测试加冒号的区块引用 </span><br><span class="line">    &gt;&gt;&gt; 测试加冒号的区块引用</span><br></pre></td></tr></table></figure><blockquote><p>这个单个使用</p></blockquote><p>多个使用</p><blockquote><p>测试加冒号的区引用 </p><blockquote><p>测试加冒号的区块引用 </p><blockquote><p>测试加冒号的区块引用 </p></blockquote></blockquote></blockquote><h2 id="3、列表"><a href="#3、列表" class="headerlink" title="3、列表"></a>3、列表</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">无序列表：可以使用星号*、加号+或者时减号-作为列表标记</span><br><span class="line">    例子：</span><br><span class="line">    * 橙子</span><br><span class="line">    * 西瓜</span><br><span class="line">    * 香蕉</span><br><span class="line">    或者</span><br><span class="line">    + 橙子</span><br><span class="line">    + 西瓜</span><br><span class="line">    + 香蕉</span><br><span class="line">    或者</span><br><span class="line">    - 橙子</span><br><span class="line">    - 西瓜</span><br><span class="line">    - 香蕉</span><br><span class="line">有序列表： 数字加英文句点</span><br><span class="line">    例子：</span><br><span class="line">    <span class="number">1</span>. Red</span><br><span class="line">    <span class="number">2</span>. yellow</span><br><span class="line">    <span class="number">3</span>. green</span><br></pre></td></tr></table></figure><p>例子：</p><ul><li>橙子</li><li>西瓜</li><li>香蕉</li></ul><p>例子：</p><ol><li>Red</li><li>yellow</li><li>green</li></ol><h2 id="4、分隔线"><a href="#4、分隔线" class="headerlink" title="4、分隔线"></a>4、分隔线</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">分隔线：在一行中用三个以上的星号、减号、底线来建立一个分隔线</span><br><span class="line">****</span><br><span class="line">___</span><br><span class="line">---</span><br></pre></td></tr></table></figure><hr><hr><hr><h2 id="5、超链接"><a href="#5、超链接" class="headerlink" title="5、超链接"></a>5、超链接</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">超链接：中括号+括号</span><br><span class="line">    [我的博客地址](https:<span class="comment">//venusj.github.io/)</span></span><br></pre></td></tr></table></figure><p><a href="https://venusj.github.io/" target="_blank" rel="noopener">我的博客地址</a></p><h2 id="6、代码块"><a href="#6、代码块" class="headerlink" title="6、代码块"></a>6、代码块</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">代码块语法  三个~ 或者```</span><br><span class="line">​~~~ </span><br><span class="line">```</span><br></pre></td></tr></table></figure><h2 id="7、字体"><a href="#7、字体" class="headerlink" title="7、字体"></a>7、字体</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">加粗： **加粗的字体**</span><br><span class="line">代码高亮： ==高亮的字体==</span><br><span class="line">删除线：~~删除线的字体~~</span><br><span class="line">斜体： *斜体的字体*</span><br></pre></td></tr></table></figure><p>加粗： <strong>加粗的字体</strong><br>代码高亮： == 高亮的字体 == (暂时不知道为啥无效)<br>删除线：<del>删除线的字体</del><br>斜体： <em>斜体的字体</em></p><h2 id="8、图片插入"><a href="#8、图片插入" class="headerlink" title="8、图片插入"></a>8、图片插入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">本地图片 语法：感叹号+中括号+圆括号   </span><br><span class="line">![图片](图片地址)   ![头像](/<span class="number">01</span>.jpg)</span><br><span class="line">在线图片</span><br></pre></td></tr></table></figure><p>本地图片   <img src="/2019/12/24/markdown 语法笔记/01.jpg" alt="头像"><br>在线图片 </p><p><img src="https://dss0.baidu.com/73t1bjeh1BF3odCf/it/u=1817457932,3341712964&amp;fm=85&amp;s=0941814603F1BBC054C31903030090DA" alt="在线图片"></p><h2 id="9、表格"><a href="#9、表格" class="headerlink" title="9、表格"></a>9、表格</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用工具快捷键 本人使用的工具是：Typora   创建表格快捷键是ctrl + T</span><br></pre></td></tr></table></figure><table><thead><tr><th>名称</th><th>性别</th><th>年龄</th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h2 id="10-、快捷键整理"><a href="#10-、快捷键整理" class="headerlink" title="10 、快捷键整理"></a>10 、快捷键整理</h2><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ctrl + shift + <span class="number">1</span>  显示目录</span><br><span class="line">ctrl + [          列表缩一格</span><br><span class="line">ctrl + ]          列表进一格</span><br><span class="line">ctrl + shift + [  有序列表 </span><br><span class="line">ctrl + shift + ]  无序列表 </span><br><span class="line">ctrl + shift + <span class="type">Q</span>  区块引用</span><br><span class="line">ctrl + <span class="number">1</span> 到 <span class="number">6</span>     标题</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;markdown-入门语法笔记&quot;&gt;&lt;a href=&quot;#markdown-入门语法笔记&quot; class=&quot;headerlink&quot; title=&quot;markdown 入门语法笔记&quot;&gt;&lt;/a&gt;markdown 入门语法笔记&lt;/h1&gt;&lt;h2 id=&quot;1、标题&quot;&gt;&lt;a href=&quot;#1、标题&quot; class=&quot;headerlink&quot; title=&quot;## 1、标题&quot;&gt;&lt;/a&gt;## 1、标题&lt;/h2&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;标题 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 一级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;## 二级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;### 三级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;#### 四级标题&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;##### 五级标题&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果&lt;/p&gt;
&lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;h2 id=&quot;二级标题&quot;&gt;&lt;a href=&quot;#二级标题&quot; class=&quot;headerlink&quot; title=&quot;二级标题&quot;&gt;&lt;/a&gt;二级标题&lt;/h2&gt;&lt;h3 id=&quot;三级标题&quot;&gt;&lt;a href=&quot;#三级标题&quot; class=&quot;headerlink&quot; title=&quot;三级标题&quot;&gt;&lt;/a&gt;三级标题&lt;/h3&gt;&lt;h4 id=&quot;四级标题&quot;&gt;&lt;a href=&quot;#四级标题&quot; class=&quot;headerlink&quot; title=&quot;四级标题&quot;&gt;&lt;/a&gt;四级标题&lt;/h4&gt;&lt;h5 id=&quot;五级标题&quot;&gt;&lt;a href=&quot;#五级标题&quot; class=&quot;headerlink&quot; title=&quot;五级标题&quot;&gt;&lt;/a&gt;五级标题&lt;/h5&gt;
    
    </summary>
    
      <category term="学习" scheme="/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="markdown" scheme="/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="/2019/12/24/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>/2019/12/24/设计模式/设计模式/</id>
    <published>2019-12-23T16:00:00.000Z</published>
    <updated>2019-12-25T15:05:18.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h1><p>在编码过程中需要结合实际的业务场景、业务模型进行对应的模式设计，但也不能过分遵守设计原则和使用设计模式，需要把握两者之间的平衡。</p><a id="more"></a><ul><li><strong>创建型模式</strong><ul><li>工厂方法模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>单例模式</li><li>原型模式</li></ul></li><li><strong>结构型模式</strong><ul><li>适配器模式</li><li>装饰者模式</li><li>代理模式</li><li>外观模式</li><li>桥接模式</li><li>组合模式</li><li>享元模式</li></ul></li><li><strong>行为型模式</strong><ul><li>策略模式</li><li>观察者模式</li><li>责任链模式</li><li>备忘录模式</li><li>模板方法模式</li><li>迭代器模式</li><li>中介者模式</li><li>命令模式</li><li>访问者模式</li><li>解释器模式</li><li>状态模式</li></ul></li></ul><h2 id="七大原则"><a href="#七大原则" class="headerlink" title="七大原则"></a>七大原则</h2><ul><li><p><strong>开闭原则</strong></p><p>定义：一个软件实体如：类、模块和函数应该对扩展开放，对修改关闭。</p><p>用抽象构建框架，用实现扩展细节</p><p>优点：提高软件系统的可服用性及可维护性</p></li><li><p><strong>依赖倒置原则</strong></p><p>定义：高层模块不应该依赖低层模块，二者都应该依赖其抽象。</p><p>抽象不应该依赖细节；细节应该依赖抽象，针对接口编程，不要针对实现编程。</p></li><li><p><strong>单一职责原则</strong></p></li><li><p><strong>接口隔离原则</strong></p></li><li><p><strong>迪米特法则(最少知道原则)</strong></p></li><li><p><strong>里氏替换原则</strong></p></li><li><p><strong>合成/服用原则</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;设计模式&quot;&gt;&lt;a href=&quot;#设计模式&quot; class=&quot;headerlink&quot; title=&quot;设计模式&quot;&gt;&lt;/a&gt;设计模式&lt;/h1&gt;&lt;p&gt;在编码过程中需要结合实际的业务场景、业务模型进行对应的模式设计，但也不能过分遵守设计原则和使用设计模式，需要把握两者之间的平衡。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="设计模式" scheme="/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>初识Scala</title>
    <link href="/2019/01/10/Scala%E5%AD%A6%E4%B9%A0/"/>
    <id>/2019/01/10/Scala学习/</id>
    <published>2019-01-09T16:00:00.000Z</published>
    <updated>2019-12-24T14:33:47.201Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scala面向对象"><a href="#Scala面向对象" class="headerlink" title="Scala面向对象"></a>Scala面向对象</h2><ul><li><p>面向对象概述</p></li><li><p>类的定义与使用</p></li><li><p>构造器</p></li><li><p>继承与重写</p></li><li><p>抽象类</p></li><li><p>伴生类和伴生对象</p></li><li><p>apply、case class 、trait</p><a id="more"></a><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>封装：属性、方法封装到类中</p><p>继承：父类和子类之间的关系</p><p>多态：<strong>父类引用指向子类对象</strong></p><h3 id="类的定义与使用"><a href="#类的定义与使用" class="headerlink" title="类的定义与使用"></a>类的定义与使用</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleObject</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> people = <span class="keyword">new</span> <span class="type">People</span>()</span><br><span class="line">    people.name = <span class="string">"Tony"</span></span><br><span class="line">    println(people.name + <span class="string">"...."</span> + people.age)</span><br><span class="line"></span><br><span class="line">    println(people.eat)</span><br><span class="line"></span><br><span class="line">    people.sign(<span class="string">"english"</span>)</span><br><span class="line"></span><br><span class="line">    people.printSex()</span><br><span class="line"><span class="comment">//    println(people.sex)    错误示例</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="comment">//var 定义一个变量，已存在set/get方法</span></span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">""</span></span><br><span class="line">  <span class="comment">//val 定义一个常量，需要初始值，只有get方法</span></span><br><span class="line">  <span class="keyword">val</span> age:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">  <span class="comment">//private [this] 修饰的属性只能在类里面进行访问</span></span><br><span class="line">  <span class="keyword">private</span> [<span class="keyword">this</span>] <span class="keyword">val</span> sex:<span class="type">String</span> = <span class="string">"woman"</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printSex</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"people sex: "</span> + sex)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eat</span></span>():<span class="type">String</span> = &#123;</span><br><span class="line">    name + <span class="string">"eatting......."</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sign</span></span>(language:<span class="type">String</span>):<span class="type">Unit</span> = &#123;</span><br><span class="line">    println(name + <span class="string">"is go back home sign to "</span> + language )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ConstructorApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> user = <span class="keyword">new</span> <span class="type">User</span>(<span class="string">"Tony"</span>, <span class="number">22</span>)</span><br><span class="line">    println(user.name + <span class="string">":"</span> + user.age + <span class="string">":"</span> + user.address)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> user2 = <span class="keyword">new</span> <span class="type">User</span>(<span class="string">"Sam"</span>, <span class="number">25</span>,<span class="string">"man"</span>)</span><br><span class="line">    println(user2.name + <span class="string">":"</span> + user2.age + <span class="string">":"</span> + user2.address + <span class="string">":"</span> + user2.gender)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主构造器 跟在class后面的为主构造器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">val name:<span class="type">String</span>, val age:<span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  println(<span class="string">"User构造函数开始。。。"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> address = <span class="string">"深圳"</span></span><br><span class="line">  <span class="keyword">var</span> gender:<span class="type">String</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="comment">//附属构造器 可多个</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name:<span class="type">String</span>, age:<span class="type">Int</span>, gender:<span class="type">String</span>)&#123;</span><br><span class="line">    <span class="comment">//附属构造器第一行代码必须要调用主构造器或者其他附属构造器</span></span><br><span class="line">    <span class="keyword">this</span>(name,age)</span><br><span class="line">    <span class="keyword">this</span>.gender = gender</span><br><span class="line">  &#125;</span><br><span class="line">  println(<span class="string">"User构造函数结束。。。"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承与重写"><a href="#继承与重写" class="headerlink" title="继承与重写"></a>继承与重写</h3><p><strong>继承</strong>：子类特有的属性一定在主构造方法使用var关键字修饰，否则在外部访问不了(如下面代码中的major属性)。在实例子类时一定会先调用父类的构造函数，在调用自己的构造函数(如下运行结果所示)。</p><p><strong>重写</strong>：如果子类需要使用父类中的属性或者方法是一定需要使用override关键字修饰。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ConstructorApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> student = <span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"Tony"</span>,<span class="number">23</span>,<span class="string">"English"</span>)</span><br><span class="line">    println(student.name +<span class="string">":"</span> + student.major)</span><br><span class="line">    println(student)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span>, var major:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">User</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  println(<span class="string">"Student构造函数开始。。。"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> address: <span class="type">String</span> = <span class="string">"上海"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//默认是调用Object的toString方法</span></span><br><span class="line">  <span class="comment">//override def toString: String = super.toString</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = <span class="string">"Student重写toString方法。重写address："</span> + address</span><br><span class="line"></span><br><span class="line">  println(<span class="string">"Student构造函数结束。。。"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User构造函数开始。。。</span><br><span class="line">User构造函数结束。。。</span><br><span class="line">Student构造函数开始。。。</span><br><span class="line">Student构造函数结束。。。</span><br><span class="line">Tony:English</span><br><span class="line">Student重写toString方法。重写address：上海</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>类的一个或者多个方法没有完成的实现(只有定义，没有实现)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">AbstractApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> dog = <span class="keyword">new</span> <span class="type">Dog</span>()</span><br><span class="line">    println(<span class="string">"name: "</span> + dog.name + <span class="string">" age: "</span> + dog.age)</span><br><span class="line">    dog.speak</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">val</span> <span class="title">name</span></span>:<span class="type">String</span></span><br><span class="line">  <span class="keyword">val</span> age:<span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span>: <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"wang wang wang!!!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">"旺财"</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> age: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伴生类和伴生对象"><a href="#伴生类和伴生对象" class="headerlink" title="伴生类和伴生对象"></a>伴生类和伴生对象</h3><p>如果有一个class,还有一个与class同名的object。那么这个object就是class的伴生对象，class就是这个object的伴生类。</p><h3 id="apply、case-class-、trait"><a href="#apply、case-class-、trait" class="headerlink" title="apply、case class 、trait"></a>apply、case class 、trait</h3><p><strong>apply</strong>：下面代码中class ApplyTest和object ApplyTest为伴生类和伴生对象。</p><p>当在伴生类和伴生对象中都定义一个apply方法时，如果</p><p>使用类名() ==&gt; Object.apply，调用object中的apply方法;</p><p>使用对象() ==&gt; Class.apply，调用class中的apply方法;</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ApplyApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="type">ApplyTest</span>.add</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="type">ApplyTest</span>.count)   <span class="comment">// 结果为10  表明object本身就是个单例对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类名</span></span><br><span class="line">    <span class="keyword">val</span> a = <span class="type">ApplyTest</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> b = <span class="keyword">new</span> <span class="type">ApplyTest</span>()</span><br><span class="line">    println(b)</span><br><span class="line">    <span class="comment">//对象名()   对象为实例出来的b</span></span><br><span class="line">    b()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplyTest</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">"Class ApplyTest 的apply()方法"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ApplyTest</span></span>&#123;</span><br><span class="line">  println(<span class="string">"Object ApplyTest 开始"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span> </span>= &#123;</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最佳实践：在Object的apply方法中去new Class</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): <span class="type">ApplyTest</span> =&#123;</span><br><span class="line">    println(<span class="string">"Object ApplyTest 的apply()方法"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在object中apply中new class</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">ApplyTest</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  println(<span class="string">"Object ApplyTest 结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object ApplyTest 开始</span><br><span class="line">Object ApplyTest 结束</span><br><span class="line">10</span><br><span class="line">Object ApplyTest 的apply()方法</span><br><span class="line">com.venusj.scala.course04.ApplyTest@7cf10a6f</span><br><span class="line">Class ApplyTest 的apply()方法</span><br></pre></td></tr></table></figure><p><strong>case class</strong>：通常用在模式匹配中，case class 不需要new。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="type">Cat</span>(<span class="string">"小猫咪"</span>).name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">name:<span class="type">String</span></span>)</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小猫咪</span><br></pre></td></tr></table></figure><p><strong>trait</strong>：这个关键字可以理解成java中的interface。只有定义，没有实现。假如一个类只实现一个被trait修饰的类，可以使用extends,若实现多个被trait修饰的类，第一个使用extends,后面的都使用with关键字。</p><p>源码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class SparkConf(loadDefaults: Boolean) </span><br><span class="line">extends Cloneable </span><br><span class="line">with Logging </span><br><span class="line">with Serializable</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scala</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Cloneable</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span> <span class="keyword">with</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Logging</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scala</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Serializable</span> <span class="keyword">extends</span> <span class="title">scala</span>.<span class="title">Any</span> <span class="keyword">with</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Scala面向对象&quot;&gt;&lt;a href=&quot;#Scala面向对象&quot; class=&quot;headerlink&quot; title=&quot;Scala面向对象&quot;&gt;&lt;/a&gt;Scala面向对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;面向对象概述&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类的定义与使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;继承与重写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抽象类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;伴生类和伴生对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;apply、case class 、trait&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Scala" scheme="/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Git学习</title>
    <link href="/2018/12/29/Git%E5%AD%A6%E4%B9%A0/"/>
    <id>/2018/12/29/Git学习/</id>
    <published>2018-12-28T16:00:00.000Z</published>
    <updated>2019-12-24T14:42:40.541Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git本地提交图示："><a href="#Git本地提交图示：" class="headerlink" title="Git本地提交图示："></a>Git本地提交图示：</h3><p><img src="/2018/12/29/Git学习/Git本地提交流程图.png" alt=""></p><h3 id="Git基础命令"><a href="#Git基础命令" class="headerlink" title="Git基础命令"></a>Git基础命令</h3><ul><li><p>git status        –查看工作区、暂存区状态</p></li><li><p>git add <files>                  –将工作区中”新增或修改的文件”增加到暂存区</files></p></li><li><p>git commit -m “***” &lt;<files>&gt;      –将文件冲暂存区提交到本地仓库,并且增加提交注释就是<-m>后面的内容</-m></files></p></li><li><p>git log –pretty=oneline                    –查看提交日志，后面参数是每个提交日志只显示一行</p><ul><li>Tips: 数据太多显示时，空格键向下翻页、b键向上翻页，q键退出</li><li>git log –oneline                         –简介模式的git log</li></ul></li><li><p>git reflog                                  –显示提交记录，并且显示HEAD步数，对于回滚帮助作用很大</p><ul><li>Tips: HEAD@{移动到当前需要多少步}<a id="more"></a></li></ul></li><li><p>版本前进后退：</p><ul><li><p>git reset –hard &lt;部分索引值&gt;     –基于索引值操作(推荐使用)</p></li><li><p>git reset –hard HEAD^                –使用^符号：只能后退，根据当前版本，退一步。</p></li><li><p>git reset –hard HEAD^^               –根据当前版本，只能后退退两步，^的数量表示后退多少步。</p></li><li><p>git reset –hard HEAD~n              –使用~符号,是为了简化^符号过多的情况，~后面的n代表当前版本后退多少步</p></li></ul></li><li><p>reset命令的是三个参数对比</p><ul><li>–soft: 仅仅在本地库移动HEAD指针(只有本地库进行了回退)</li><li>–mixed: 在本地库移动HEAD指针，重置暂存区(工作区、暂存区回退)</li><li>–hard: 在本地库移动HEAD指针，重置暂存区，重置工作区(工作区、暂存区、本地库同时回退)</li></ul></li><li>删除文件并找回：<ul><li>前提：删除前，文件存在是的状态提交到了本地库</li><li>操作：git reset –hard &lt;指针位置&gt;  </li></ul></li><li>文件比较：<ul><li>git diff <files>          – 比较文件差异 ,将工作区中的文件和暂存区进行比较，还未add时的比较</files></li><li>git diff [本地库中的历史版本] <files>     –将工作区中的文件和本地库历史记录进行比较<ul><li>:set nu命令可以在VIM编辑器中显示行号。</li><li>tail -n 3 files   该命令用于查看文件倒数三行信息</li></ul></files></li></ul></li><li><p>Git分支 </p><ul><li>好处：同时并行推进多个功能开发，提高开发效率；哥哥分支在开发过程中，如果某一个分支开发失败，不会影响到主干代码；删除失败分支重新开始就行。 </li><li>git branch -v                           – 查看当前所有分支，-v参数表示版本号，可带可不带</li><li>git branch dev                        –创建名为dev的分支</li><li>git checkout dev                    –切换到分支dev上</li><li>合并分支：<ul><li>场景：假设在dev分支进行修复Bug,然后要把dev分支最新代码合并到master上</li><li>第一步先切换到master分支上，</li><li>第二步执行git merge dev 命令</li></ul></li><li>冲突解决： <ul><li>场景：假设master分支和dev分支同事修改一个文件的同一地方代码，并且都提交到本地库，这个时候合并执行git merge dev就会显示文件冲突。</li><li>第一步找到对应文件冲突地方，并且修正，此时还是处于Merging状态，</li><li>第二步需要对应修改冲突后的文件进行git add <files> 操作，</files></li><li>第三步执行git commit命令，这个提交命令<strong>一定</strong>不能指定某个文件。这样Merging状态就会消失，同时分支已经合并好了。</li></ul></li><li>git remote -v                                  查看所有别名命令 </li><li>git remote  add origin git_url                       为当前链接取一个origin别名</li><li>git push [别名]  [分支]                                      把本地仓库修改推送到远程库</li><li>git clone git_url</li><li>拉取<ol><li>无冲突时： <ul><li>pull = fetch + merge</li><li>git fetch [远程库地址别名] [远程分支名]            先拉取代码下来，文件未合并</li><li>git merge [远程地址别名/远程分支名]            合并拉取下来的代码</li><li>git pull [远程库地址别名] [远程分支名]</li></ul></li><li>有冲突时：<ul><li>场景：自己在本地库中修改完代码，之后push到远程库时，如果不是基于远程库的最新版所做的改变，不能推送，必须先pull。<ul><li>拉取下来后如果最新代码与自己的有冲突，则按照如下步骤操作(即上面的冲突解决操作)</li></ul></li></ul></li></ol></li><li><p>跨团队协作：</p><ul><li>git fork git_url</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Git本地提交图示：&quot;&gt;&lt;a href=&quot;#Git本地提交图示：&quot; class=&quot;headerlink&quot; title=&quot;Git本地提交图示：&quot;&gt;&lt;/a&gt;Git本地提交图示：&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2018/12/29/Git学习/Git本地提交流程图.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Git基础命令&quot;&gt;&lt;a href=&quot;#Git基础命令&quot; class=&quot;headerlink&quot; title=&quot;Git基础命令&quot;&gt;&lt;/a&gt;Git基础命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git status        –查看工作区、暂存区状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git add &lt;files&gt;                  –将工作区中”新增或修改的文件”增加到暂存区&lt;/files&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git commit -m “***” &amp;lt;&lt;files&gt;&amp;gt;      –将文件冲暂存区提交到本地仓库,并且增加提交注释就是&lt;-m&gt;后面的内容&lt;/-m&gt;&lt;/files&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git log –pretty=oneline                    –查看提交日志，后面参数是每个提交日志只显示一行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tips: 数据太多显示时，空格键向下翻页、b键向上翻页，q键退出&lt;/li&gt;
&lt;li&gt;git log –oneline                         –简介模式的git log&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git reflog                                  –显示提交记录，并且显示HEAD步数，对于回滚帮助作用很大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tips: HEAD@{移动到当前需要多少步}&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="学习" scheme="/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Git" scheme="/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="/2018/08/18/hello-world/"/>
    <id>/2018/08/18/hello-world/</id>
    <published>2018-08-18T14:50:33.742Z</published>
    <updated>2018-08-18T14:50:33.742Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
