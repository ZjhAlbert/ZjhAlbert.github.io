<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>VenusJ</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="/"/>
  <updated>2019-01-14T04:42:26.949Z</updated>
  <id>/</id>
  
  <author>
    <name>VenusJ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识Scala</title>
    <link href="/2019/01/10/Scala%E5%AD%A6%E4%B9%A0/"/>
    <id>/2019/01/10/Scala学习/</id>
    <published>2019-01-09T16:00:00.000Z</published>
    <updated>2019-01-14T04:42:26.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scala面向对象"><a href="#Scala面向对象" class="headerlink" title="Scala面向对象"></a>Scala面向对象</h2><ul><li><p>面向对象概述</p></li><li><p>类的定义与使用</p></li><li><p>构造器</p></li><li><p>继承与重写</p></li><li><p>抽象类</p></li><li><p>伴生类和伴生对象</p></li><li><p>apply、case class 、trait</p><a id="more"></a><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><p>封装：属性、方法封装到类中</p><p>继承：父类和子类之间的关系</p><p>多态：<strong>父类引用指向子类对象</strong></p><h3 id="类的定义与使用"><a href="#类的定义与使用" class="headerlink" title="类的定义与使用"></a>类的定义与使用</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">SimpleObject</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> people = <span class="keyword">new</span> <span class="type">People</span>()</span><br><span class="line">    people.name = <span class="string">"Tony"</span></span><br><span class="line">    println(people.name + <span class="string">"...."</span> + people.age)</span><br><span class="line"></span><br><span class="line">    println(people.eat)</span><br><span class="line"></span><br><span class="line">    people.sign(<span class="string">"english"</span>)</span><br><span class="line"></span><br><span class="line">    people.printSex()</span><br><span class="line"><span class="comment">//    println(people.sex)    错误示例</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">  <span class="comment">//var 定义一个变量，已存在set/get方法</span></span><br><span class="line">  <span class="keyword">var</span> name:<span class="type">String</span> = <span class="string">""</span></span><br><span class="line">  <span class="comment">//val 定义一个常量，需要初始值，只有get方法</span></span><br><span class="line">  <span class="keyword">val</span> age:<span class="type">Int</span> = <span class="number">10</span></span><br><span class="line">  <span class="comment">//private [this] 修饰的属性只能在类里面进行访问</span></span><br><span class="line">  <span class="keyword">private</span> [<span class="keyword">this</span>] <span class="keyword">val</span> sex:<span class="type">String</span> = <span class="string">"woman"</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">printSex</span></span>(): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"people sex: "</span> + sex)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">eat</span></span>():<span class="type">String</span> = &#123;</span><br><span class="line">    name + <span class="string">"eatting......."</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">sign</span></span>(language:<span class="type">String</span>):<span class="type">Unit</span> = &#123;</span><br><span class="line">    println(name + <span class="string">"is go back home sign to "</span> + language )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ConstructorApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> user = <span class="keyword">new</span> <span class="type">User</span>(<span class="string">"Tony"</span>, <span class="number">22</span>)</span><br><span class="line">    println(user.name + <span class="string">":"</span> + user.age + <span class="string">":"</span> + user.address)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> user2 = <span class="keyword">new</span> <span class="type">User</span>(<span class="string">"Sam"</span>, <span class="number">25</span>,<span class="string">"man"</span>)</span><br><span class="line">    println(user2.name + <span class="string">":"</span> + user2.age + <span class="string">":"</span> + user2.address + <span class="string">":"</span> + user2.gender)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//主构造器 跟在class后面的为主构造器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">val name:<span class="type">String</span>, val age:<span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  println(<span class="string">"User构造函数开始。。。"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">val</span> address = <span class="string">"深圳"</span></span><br><span class="line">  <span class="keyword">var</span> gender:<span class="type">String</span> = _</span><br><span class="line"></span><br><span class="line">  <span class="comment">//附属构造器 可多个</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">this</span></span>(name:<span class="type">String</span>, age:<span class="type">Int</span>, gender:<span class="type">String</span>)&#123;</span><br><span class="line">    <span class="comment">//附属构造器第一行代码必须要调用主构造器或者其他附属构造器</span></span><br><span class="line">    <span class="keyword">this</span>(name,age)</span><br><span class="line">    <span class="keyword">this</span>.gender = gender</span><br><span class="line">  &#125;</span><br><span class="line">  println(<span class="string">"User构造函数结束。。。"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="继承与重写"><a href="#继承与重写" class="headerlink" title="继承与重写"></a>继承与重写</h3><p><strong>继承</strong>：子类特有的属性一定在主构造方法使用var关键字修饰，否则在外部访问不了(如下面代码中的major属性)。在实例子类时一定会先调用父类的构造函数，在调用自己的构造函数(如下运行结果所示)。</p><p><strong>重写</strong>：如果子类需要使用父类中的属性或者方法是一定需要使用override关键字修饰。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ConstructorApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> student = <span class="keyword">new</span> <span class="type">Student</span>(<span class="string">"Tony"</span>,<span class="number">23</span>,<span class="string">"English"</span>)</span><br><span class="line">    println(student.name +<span class="string">":"</span> + student.major)</span><br><span class="line">    println(student)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span>, var major:<span class="type">String</span></span>) <span class="keyword">extends</span> <span class="title">User</span>(<span class="params">name:<span class="type">String</span>, age:<span class="type">Int</span></span>) </span>&#123;</span><br><span class="line">  println(<span class="string">"Student构造函数开始。。。"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> address: <span class="type">String</span> = <span class="string">"上海"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">//默认是调用Object的toString方法</span></span><br><span class="line">  <span class="comment">//override def toString: String = super.toString</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">toString</span></span>: <span class="type">String</span> = <span class="string">"Student重写toString方法。重写address："</span> + address</span><br><span class="line"></span><br><span class="line">  println(<span class="string">"Student构造函数结束。。。"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">User构造函数开始。。。</span><br><span class="line">User构造函数结束。。。</span><br><span class="line">Student构造函数开始。。。</span><br><span class="line">Student构造函数结束。。。</span><br><span class="line">Tony:English</span><br><span class="line">Student重写toString方法。重写address：上海</span><br></pre></td></tr></table></figure><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>类的一个或者多个方法没有完成的实现(只有定义，没有实现)</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">AbstractApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">val</span> dog = <span class="keyword">new</span> <span class="type">Dog</span>()</span><br><span class="line">    println(<span class="string">"name: "</span> + dog.name + <span class="string">" age: "</span> + dog.age)</span><br><span class="line">    dog.speak</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">val</span> <span class="title">name</span></span>:<span class="type">String</span></span><br><span class="line">  <span class="keyword">val</span> age:<span class="type">Int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">def</span> <span class="title">speak</span></span>: <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="string">"wang wang wang!!!"</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> name: <span class="type">String</span> = <span class="string">"旺财"</span></span><br><span class="line">  <span class="keyword">override</span> <span class="keyword">val</span> age: <span class="type">Int</span> = <span class="number">3</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="伴生类和伴生对象"><a href="#伴生类和伴生对象" class="headerlink" title="伴生类和伴生对象"></a>伴生类和伴生对象</h3><p>如果有一个class,还有一个与class同名的object。那么这个object就是class的伴生对象，class就是这个object的伴生类。</p><h3 id="apply、case-class-、trait"><a href="#apply、case-class-、trait" class="headerlink" title="apply、case class 、trait"></a>apply、case class 、trait</h3><p><strong>apply</strong>：下面代码中class ApplyTest和object ApplyTest为伴生类和伴生对象。</p><p>当在伴生类和伴生对象中都定义一个apply方法时，如果</p><p>使用类名() ==&gt; Object.apply，调用object中的apply方法;</p><p>使用对象() ==&gt; Class.apply，调用class中的apply方法;</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ApplyApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    <span class="keyword">for</span> (i &lt;- <span class="number">1</span> to <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="type">ApplyTest</span>.add</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="type">ApplyTest</span>.count)   <span class="comment">// 结果为10  表明object本身就是个单例对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//类名</span></span><br><span class="line">    <span class="keyword">val</span> a = <span class="type">ApplyTest</span>()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> b = <span class="keyword">new</span> <span class="type">ApplyTest</span>()</span><br><span class="line">    println(b)</span><br><span class="line">    <span class="comment">//对象名()   对象为实例出来的b</span></span><br><span class="line">    b()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ApplyTest</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): <span class="type">Unit</span> =&#123;</span><br><span class="line">    println(<span class="string">"Class ApplyTest 的apply()方法"</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">ApplyTest</span></span>&#123;</span><br><span class="line">  println(<span class="string">"Object ApplyTest 开始"</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">add</span> </span>= &#123;</span><br><span class="line">    count = count + <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//最佳实践：在Object的apply方法中去new Class</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">apply</span></span>(): <span class="type">ApplyTest</span> =&#123;</span><br><span class="line">    println(<span class="string">"Object ApplyTest 的apply()方法"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//在object中apply中new class</span></span><br><span class="line">    <span class="keyword">new</span> <span class="type">ApplyTest</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  println(<span class="string">"Object ApplyTest 结束"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Object ApplyTest 开始</span><br><span class="line">Object ApplyTest 结束</span><br><span class="line">10</span><br><span class="line">Object ApplyTest 的apply()方法</span><br><span class="line">com.venusj.scala.course04.ApplyTest@7cf10a6f</span><br><span class="line">Class ApplyTest 的apply()方法</span><br></pre></td></tr></table></figure><p><strong>case class</strong>：通常用在模式匹配中，case class 不需要new。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">object</span> <span class="title">CaseClassApp</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">main</span></span>(args: <span class="type">Array</span>[<span class="type">String</span>]): <span class="type">Unit</span> = &#123;</span><br><span class="line">    println(<span class="type">Cat</span>(<span class="string">"小猫咪"</span>).name)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span>(<span class="params">name:<span class="type">String</span></span>)</span></span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">小猫咪</span><br></pre></td></tr></table></figure><p><strong>trait</strong>：这个关键字可以理解成java中的interface。只有定义，没有实现。假如一个类只实现一个被trait修饰的类，可以使用extends,若实现多个被trait修饰的类，第一个使用extends,后面的都使用with关键字。</p><p>源码示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class SparkConf(loadDefaults: Boolean) </span><br><span class="line">extends Cloneable </span><br><span class="line">with Logging </span><br><span class="line">with Serializable</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scala</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Cloneable</span> <span class="keyword">extends</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Object</span> <span class="keyword">with</span> <span class="title">java</span>.<span class="title">lang</span>.<span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Logging</span> </span>&#123;...&#125;</span><br></pre></td></tr></table></figure><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> scala</span><br><span class="line"><span class="class"><span class="keyword">trait</span> <span class="title">Serializable</span> <span class="keyword">extends</span> <span class="title">scala</span>.<span class="title">Any</span> <span class="keyword">with</span> <span class="title">java</span>.<span class="title">io</span>.<span class="title">Serializable</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Scala面向对象&quot;&gt;&lt;a href=&quot;#Scala面向对象&quot; class=&quot;headerlink&quot; title=&quot;Scala面向对象&quot;&gt;&lt;/a&gt;Scala面向对象&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;面向对象概述&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类的定义与使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;继承与重写&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;抽象类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;伴生类和伴生对象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;apply、case class 、trait&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Scala" scheme="/tags/Scala/"/>
    
  </entry>
  
  <entry>
    <title>Git学习</title>
    <link href="/2018/12/29/Git%E5%AD%A6%E4%B9%A0/"/>
    <id>/2018/12/29/Git学习/</id>
    <published>2018-12-28T16:00:00.000Z</published>
    <updated>2019-01-01T15:10:27.041Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git本地提交图示："><a href="#Git本地提交图示：" class="headerlink" title="Git本地提交图示："></a>Git本地提交图示：</h3><p><img src="/2018/12/29/Git学习/Git本地提交流程图.png" alt=""></p><h3 id="Git基础命令"><a href="#Git基础命令" class="headerlink" title="Git基础命令"></a>Git基础命令</h3><ul><li><p>git status        –查看工作区、暂存区状态</p></li><li><p>git add <files>                  –将工作区中”新增或修改的文件”增加到暂存区</files></p></li><li><p>git commit -m “***” &lt;<files>&gt;      –将文件冲暂存区提交到本地仓库,并且增加提交注释就是<-m>后面的内容</-m></files></p></li><li><p>git log –pretty=oneline                    –查看提交日志，后面参数是每个提交日志只显示一行</p><ul><li>Tips: 数据太多显示时，空格键向下翻页、b键向上翻页，q键退出</li><li>git log –oneline                         –简介模式的git log</li></ul></li><li><p>git reflog                                  –显示提交记录，并且显示HEAD步数，对于回滚帮助作用很大</p><ul><li>Tips: HEAD@{移动到当前需要多少步}<a id="more"></a></li></ul></li><li><p>版本前进后退：</p><ul><li><p>git reset –hard &lt;部分索引值&gt;     –基于索引值操作(推荐使用)</p></li><li><p>git reset –hard HEAD^                –使用^符号：只能后退，根据当前版本，退一步。</p></li><li><p>git reset –hard HEAD^^               –根据当前版本，只能后退退两步，^的数量表示后退多少步。</p></li><li><p>git reset –hard HEAD~n              –使用~符号,是为了简化^符号过多的情况，~后面的n代表当前版本后退多少步</p></li></ul></li><li><p>reset命令的是三个参数对比</p><ul><li>–soft: 仅仅在本地库移动HEAD指针(只有本地库进行了回退)</li><li>–mixed: 在本地库移动HEAD指针，重置暂存区(工作区、暂存区回退)</li><li>–hard: 在本地库移动HEAD指针，重置暂存区，重置工作区(工作区、暂存区、本地库同时回退)</li></ul></li><li>删除文件并找回：<ul><li>前提：删除前，文件存在是的状态提交到了本地库</li><li>操作：git reset –hard &lt;指针位置&gt;  </li></ul></li><li>文件比较：<ul><li>git diff <files>          – 比较文件差异 ,将工作区中的文件和暂存区进行比较，还未add时的比较</files></li><li>git diff [本地库中的历史版本] <files>     –将工作区中的文件和本地库历史记录进行比较<ul><li>:set nu命令可以在VIM编辑器中显示行号。</li><li>tail -n 3 files   该命令用于查看文件倒数三行信息</li></ul></files></li></ul></li><li>Git分支 <ul><li>好处：同时并行推进多个功能开发，提高开发效率；哥哥分支在开发过程中，如果某一个分支开发失败，不会影响到主干代码；删除失败分支重新开始就行。 </li><li>git branch -v                           – 查看当前所有分支，-v参数表示版本号，可带可不带</li><li>git branch dev                        –创建名为dev的分支</li><li>git checkout dev                    –切换到分支dev上</li><li>合并分支：<ul><li>场景：假设在dev分支进行修复Bug,然后要把dev分支最新代码合并到master上</li><li>第一步先切换到master分支上，</li><li>第二步执行git merge dev 命令</li></ul></li><li>冲突解决： <ul><li>场景：假设master分支和dev分支同事修改一个文件的同一地方代码，并且都提交到本地库，这个时候合并执行git merge dev就会显示文件冲突。</li><li>第一步找到对应文件冲突地方，并且修正，此时还是处于Merging状态，</li><li>第二步需要对应修改冲突后的文件进行git add <files> 操作，</files></li><li>第三步执行git commit命令，这个提交命令<strong>一定</strong>不能指定某个文件。这样Merging状态就会消失，同时分支已经合并好了。</li></ul></li><li>git remote -v                                  查看所有别名命令 </li><li>git remote  add origin git_url                       为当前链接取一个origin别名</li><li>git push [别名]  [分支]                                      把本地仓库修改推送到远程库</li><li>git clone git_url</li><li>拉取<ol><li>无冲突时： <ul><li>pull = fetch + merge</li><li>git fetch [远程库地址别名] [远程分支名]            先拉取代码下来，文件未合并</li><li>git merge [远程地址别名/远程分支名]            合并拉取下来的代码</li><li>git pull [远程库地址别名] [远程分支名]</li></ul></li><li>有冲突时：<ul><li>场景：自己在本地库中修改完代码，之后push到远程库时，如果不是基于远程库的最新版所做的改变，不能推送，必须先pull。<ul><li>拉取下来后如果最新代码与自己的有冲突，则按照如下步骤操作(即上面的冲突解决操作)</li></ul></li></ul></li></ol></li><li>跨团队协作：<ul><li>git fork git_url</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Git本地提交图示：&quot;&gt;&lt;a href=&quot;#Git本地提交图示：&quot; class=&quot;headerlink&quot; title=&quot;Git本地提交图示：&quot;&gt;&lt;/a&gt;Git本地提交图示：&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/2018/12/29/Git学习/Git本地提交流程图.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Git基础命令&quot;&gt;&lt;a href=&quot;#Git基础命令&quot; class=&quot;headerlink&quot; title=&quot;Git基础命令&quot;&gt;&lt;/a&gt;Git基础命令&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;git status        –查看工作区、暂存区状态&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git add &lt;files&gt;                  –将工作区中”新增或修改的文件”增加到暂存区&lt;/files&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git commit -m “***” &amp;lt;&lt;files&gt;&amp;gt;      –将文件冲暂存区提交到本地仓库,并且增加提交注释就是&lt;-m&gt;后面的内容&lt;/-m&gt;&lt;/files&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git log –pretty=oneline                    –查看提交日志，后面参数是每个提交日志只显示一行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tips: 数据太多显示时，空格键向下翻页、b键向上翻页，q键退出&lt;/li&gt;
&lt;li&gt;git log –oneline                         –简介模式的git log&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;git reflog                                  –显示提交记录，并且显示HEAD步数，对于回滚帮助作用很大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Tips: HEAD@{移动到当前需要多少步}&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Git" scheme="/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="/2018/08/18/hello-world/"/>
    <id>/2018/08/18/hello-world/</id>
    <published>2018-08-18T14:50:33.742Z</published>
    <updated>2018-08-18T14:50:33.742Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
